An IOT ENABLED FETAL HEALTH MONITORING DURING PREGNANCY
#include "WiFiEsp.h"
#include "secrets.h"
#include "ThingSpeak.h" 
#include<math.h>
#include <DHT.h>
#define DHT_Pin 12 // DHT11 is connected to digital pin 7
#define DHT_Type DHT11 // Specifying the type of DHT sensor

DHT dht(DHT_Pin, DHT_Type);

#define USE_ARDUINO_INTERRUPTS true

char ssid[] = SECRET_SSID;   
char pass[] = SECRET_PASS; 
int keyIndex = 0;      
WiFiEspClient  client;

// Emulate Serial1 on pins 6/7 if not present
#ifndef HAVE_HWSERIAL1
#include "SoftwareSerial.h"
SoftwareSerial Serial1(2, 3); // RX, TX
#define ESP_BAUDRATE  19200
#else
#define ESP_BAUDRATE  115200
#endif

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

const int accelerometerXPin = A0;  // Connect the X-axis to an analog pin
const int accelerometerYPin = A1;  // Connect the Y-axis to an analog pin
const int accelerometerZPin = A2;  // Connect the Z-axis to an analog pin
const int heartbeatPin = A3;


String myStatus = "";

void setup() {
  Serial.begin(115200);
  dht.begin();
  while(!Serial){
    ; 
  }
  
  // initialize serial for ESP module  
  setEspBaudRate(ESP_BAUDRATE);
  
  while (!Serial) {
    ; 
  }

  Serial.print("Searching for ESP8266..."); 
  // initialize ESP module
  WiFi.init(&Serial1);

  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue
    while (true);
  }
  Serial.println("found it!");
   
  ThingSpeak.begin(client);  
}

void loop() {
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }
  float temperature = dht.readTemperature(); // read the temperature
  float humidity = dht.readHumidity(); // read the humidity

  // check if there was an error reading the data
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Error reading data from DHT sensor");
    return;
  }
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println("Â°C");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println("%");

  int accelerometerX = analogRead(accelerometerXPin);
  int accelerometerY = analogRead(accelerometerYPin);
  int accelerometerZ = analogRead(accelerometerZPin);

  int heartbeatValue = analogRead(heartbeatPin);
  
  Serial.print("Accelerometer X: ");
  Serial.println(accelerometerX);
  Serial.print("Accelerometer Y: ");
  Serial.println(accelerometerY);
  Serial.print("Accelerometer Z: ");
  Serial.println(accelerometerZ);
  Serial.print("Heartbeat Sensor Value: ");
  Serial.println(heartbeatValue);
  
  ThingSpeak.setField(1, temperature);
  ThingSpeak.setField(2, humidity);
  ThingSpeak.setField(3, accelerometerX);
  ThingSpeak.setField(4, accelerometerY);
  ThingSpeak.setField(5, accelerometerZ);
  ThingSpeak.setField(6, heartbeatValue);

  ThingSpeak.setStatus(myStatus);
  // write to the ThingSpeak channel
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  delay(6000);
}

void setEspBaudRate(unsigned long baudrate){
  long rates[6] = {115200,74880,57600,38400,19200,9600};

  Serial.print("Setting ESP8266 baudrate to ");
  Serial.print(baudrate);
  Serial.println("...");

  for(int i = 0; i < 6; i++){
    Serial1.begin(rates[i]);
    delay(100);
    Serial1.print("AT+UART_DEF=");
    Serial1.print(baudrate);
    Serial1.print(",8,1,0,0\r\n");
    delay(100);  
  }
  Serial1.begin(baudrate);
}
